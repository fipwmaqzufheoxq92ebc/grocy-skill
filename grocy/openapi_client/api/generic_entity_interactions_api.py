"""
    grocy REST API

    Authentication is done via API keys (header *GROCY-API-KEY* or same named query parameter), which you can manage [here](http://localhost:8111/manageapikeys).<br>Additionally requests from within the frontend are also valid (via session cookie).  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.error400 import Error400
from openapi_client.model.error500 import Error500
from openapi_client.model.exposed_entity import ExposedEntity
from openapi_client.model.exposed_entity_not_including_not_deletable import ExposedEntityNotIncludingNotDeletable
from openapi_client.model.exposed_entity_not_including_not_editable import ExposedEntityNotIncludingNotEditable
from openapi_client.model.exposed_entity_not_including_not_listable import ExposedEntityNotIncludingNotListable
from openapi_client.model.inline_response2001 import InlineResponse2001
UNKNOWN_BASE_TYPE = object()


class GenericEntityInteractionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __objects_entity_get(
            self,
            entity,
            **kwargs
        ):
            """Returns all objects of the given entity  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.objects_entity_get(entity, async_req=True)
            >>> result = thread.get()

            Args:
                entity (ExposedEntityNotIncludingNotListable): A valid entity name

            Keyword Args:
                query ([str]): An array of filter conditions, each of them is a string in the form of `<field><condition><value>` where<br>`<field>` is a valid field name<br>`<condition>` is a comparison operator, one of<br>&nbsp;&nbsp;`=` equal<br>&nbsp;&nbsp;`!=` not equal<br>&nbsp;&nbsp;`~` LIKE<br>&nbsp;&nbsp;`!~` not LIKE<br>&nbsp;&nbsp;`<` less<br>&nbsp;&nbsp;`>` greater<br>&nbsp;&nbsp;`<=` less or equal<br>&nbsp;&nbsp;`>=` greater or equal<br>&nbsp;&nbsp;`ยง` regular expression<br>`<value>` is the value to search for. [optional]
                order (str): A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted). [optional]
                limit (int): The maximum number of objects to return. [optional]
                offset (int): The number of objects to skip. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [dict]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['entity'] = \
                entity
            return self.call_with_http_info(**kwargs)

        self.objects_entity_get = _Endpoint(
            settings={
                'response_type': ([dict],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/objects/{entity}',
                'operation_id': 'objects_entity_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity',
                    'query',
                    'order',
                    'limit',
                    'offset',
                ],
                'required': [
                    'entity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity':
                        (ExposedEntityNotIncludingNotListable,),
                    'query':
                        ([str],),
                    'order':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'entity': 'entity',
                    'query': 'query[]',
                    'order': 'order',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'entity': 'path',
                    'query': 'query',
                    'order': 'query',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                    'query': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__objects_entity_get
        )

        def __objects_entity_object_id_delete(
            self,
            entity,
            object_id,
            **kwargs
        ):
            """Deletes a single object of the given entity  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.objects_entity_object_id_delete(entity, object_id, async_req=True)
            >>> result = thread.get()

            Args:
                entity (ExposedEntityNotIncludingNotDeletable): A valid entity name
                object_id (int): A valid object id of the given entity

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['entity'] = \
                entity
            kwargs['object_id'] = \
                object_id
            return self.call_with_http_info(**kwargs)

        self.objects_entity_object_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/objects/{entity}/{objectId}',
                'operation_id': 'objects_entity_object_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity',
                    'object_id',
                ],
                'required': [
                    'entity',
                    'object_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity':
                        (ExposedEntityNotIncludingNotDeletable,),
                    'object_id':
                        (int,),
                },
                'attribute_map': {
                    'entity': 'entity',
                    'object_id': 'objectId',
                },
                'location_map': {
                    'entity': 'path',
                    'object_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__objects_entity_object_id_delete
        )

        def __objects_entity_object_id_get(
            self,
            entity,
            object_id,
            **kwargs
        ):
            """Returns a single object of the given entity  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.objects_entity_object_id_get(entity, object_id, async_req=True)
            >>> result = thread.get()

            Args:
                entity (ExposedEntityNotIncludingNotListable): A valid entity name
                object_id (int): A valid object id of the given entity

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['entity'] = \
                entity
            kwargs['object_id'] = \
                object_id
            return self.call_with_http_info(**kwargs)

        self.objects_entity_object_id_get = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/objects/{entity}/{objectId}',
                'operation_id': 'objects_entity_object_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity',
                    'object_id',
                ],
                'required': [
                    'entity',
                    'object_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity':
                        (ExposedEntityNotIncludingNotListable,),
                    'object_id':
                        (int,),
                },
                'attribute_map': {
                    'entity': 'entity',
                    'object_id': 'objectId',
                },
                'location_map': {
                    'entity': 'path',
                    'object_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__objects_entity_object_id_get
        )

        def __objects_entity_object_id_put(
            self,
            entity,
            object_id,
            unknown_base_type,
            **kwargs
        ):
            """Edits the given object of the given entity  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.objects_entity_object_id_put(entity, object_id, unknown_base_type, async_req=True)
            >>> result = thread.get()

            Args:
                entity (ExposedEntityNotIncludingNotEditable): A valid entity name
                object_id (int): A valid object id of the given entity
                unknown_base_type (UNKNOWN_BASE_TYPE): A valid entity object of the entity specified in parameter *entity*

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['entity'] = \
                entity
            kwargs['object_id'] = \
                object_id
            kwargs['unknown_base_type'] = \
                unknown_base_type
            return self.call_with_http_info(**kwargs)

        self.objects_entity_object_id_put = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/objects/{entity}/{objectId}',
                'operation_id': 'objects_entity_object_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity',
                    'object_id',
                    'unknown_base_type',
                ],
                'required': [
                    'entity',
                    'object_id',
                    'unknown_base_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity':
                        (ExposedEntityNotIncludingNotEditable,),
                    'object_id':
                        (int,),
                    'unknown_base_type':
                        (UNKNOWN_BASE_TYPE,),
                },
                'attribute_map': {
                    'entity': 'entity',
                    'object_id': 'objectId',
                },
                'location_map': {
                    'entity': 'path',
                    'object_id': 'path',
                    'unknown_base_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__objects_entity_object_id_put
        )

        def __objects_entity_post(
            self,
            entity,
            unknown_base_type,
            **kwargs
        ):
            """Adds a single object of the given entity  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.objects_entity_post(entity, unknown_base_type, async_req=True)
            >>> result = thread.get()

            Args:
                entity (ExposedEntityNotIncludingNotEditable): A valid entity name
                unknown_base_type (UNKNOWN_BASE_TYPE): A valid entity object of the entity specified in parameter *entity*

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse2001
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['entity'] = \
                entity
            kwargs['unknown_base_type'] = \
                unknown_base_type
            return self.call_with_http_info(**kwargs)

        self.objects_entity_post = _Endpoint(
            settings={
                'response_type': (InlineResponse2001,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/objects/{entity}',
                'operation_id': 'objects_entity_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity',
                    'unknown_base_type',
                ],
                'required': [
                    'entity',
                    'unknown_base_type',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity':
                        (ExposedEntityNotIncludingNotEditable,),
                    'unknown_base_type':
                        (UNKNOWN_BASE_TYPE,),
                },
                'attribute_map': {
                    'entity': 'entity',
                },
                'location_map': {
                    'entity': 'path',
                    'unknown_base_type': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__objects_entity_post
        )

        def __userfields_entity_object_id_get(
            self,
            entity,
            object_id,
            **kwargs
        ):
            """Returns all userfields with their values of the given object of the given entity  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.userfields_entity_object_id_get(entity, object_id, async_req=True)
            >>> result = thread.get()

            Args:
                entity (ExposedEntity): A valid entity name
                object_id (int): A valid object id of the given entity

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['entity'] = \
                entity
            kwargs['object_id'] = \
                object_id
            return self.call_with_http_info(**kwargs)

        self.userfields_entity_object_id_get = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/userfields/{entity}/{objectId}',
                'operation_id': 'userfields_entity_object_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity',
                    'object_id',
                ],
                'required': [
                    'entity',
                    'object_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity':
                        (ExposedEntity,),
                    'object_id':
                        (int,),
                },
                'attribute_map': {
                    'entity': 'entity',
                    'object_id': 'objectId',
                },
                'location_map': {
                    'entity': 'path',
                    'object_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__userfields_entity_object_id_get
        )

        def __userfields_entity_object_id_put(
            self,
            entity,
            object_id,
            body,
            **kwargs
        ):
            """Edits the given userfields of the given object of the given entity  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.userfields_entity_object_id_put(entity, object_id, body, async_req=True)
            >>> result = thread.get()

            Args:
                entity (ExposedEntityNotIncludingNotEditable): A valid entity name
                object_id (int): A valid object id of the given entity
                body (bool, date, datetime, dict, float, int, list, str, none_type): A valid entity object of the entity specified in parameter *entity*

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['entity'] = \
                entity
            kwargs['object_id'] = \
                object_id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.userfields_entity_object_id_put = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/userfields/{entity}/{objectId}',
                'operation_id': 'userfields_entity_object_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity',
                    'object_id',
                    'body',
                ],
                'required': [
                    'entity',
                    'object_id',
                    'body',
                ],
                'nullable': [
                    'body',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity':
                        (ExposedEntityNotIncludingNotEditable,),
                    'object_id':
                        (int,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'entity': 'entity',
                    'object_id': 'objectId',
                },
                'location_map': {
                    'entity': 'path',
                    'object_id': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__userfields_entity_object_id_put
        )
