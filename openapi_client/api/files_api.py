"""
    grocy REST API

    Authentication is done via API keys (header *GROCY-API-KEY* or same named query parameter), which you can manage [here](http://localhost:8111/manageapikeys).<br>Additionally requests from within the frontend are also valid (via session cookie).  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.error400 import Error400


class FilesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __files_group_file_name_delete(
            self,
            group,
            file_name,
            **kwargs
        ):
            """Deletes the given file  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.files_group_file_name_delete(group, file_name, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): The file group
                file_name (str): The file name (including extension)<br>**BASE64 encoded**

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['file_name'] = \
                file_name
            return self.call_with_http_info(**kwargs)

        self.files_group_file_name_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/files/{group}/{fileName}',
                'operation_id': 'files_group_file_name_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'file_name',
                ],
                'required': [
                    'group',
                    'file_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'file_name':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'file_name': 'fileName',
                },
                'location_map': {
                    'group': 'path',
                    'file_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__files_group_file_name_delete
        )

        def __files_group_file_name_get(
            self,
            group,
            file_name,
            **kwargs
        ):
            """Serves the given file  # noqa: E501

            With proper Content-Type header  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.files_group_file_name_get(group, file_name, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): The file group
                file_name (str): The file name (including extension)<br>**BASE64 encoded**

            Keyword Args:
                force_serve_as (str): Force the file to be served as the given type. [optional] if omitted the server will use the default value of "picture"
                best_fit_height (int): Only when using `force_serve_as` = `picture`: Downscale the picture to the given height while maintaining the aspect ratio. [optional]
                best_fit_width (int): Only when using `force_serve_as` = `picture`: Downscale the picture to the given width while maintaining the aspect ratio. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['file_name'] = \
                file_name
            return self.call_with_http_info(**kwargs)

        self.files_group_file_name_get = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/files/{group}/{fileName}',
                'operation_id': 'files_group_file_name_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'file_name',
                    'force_serve_as',
                    'best_fit_height',
                    'best_fit_width',
                ],
                'required': [
                    'group',
                    'file_name',
                ],
                'nullable': [
                ],
                'enum': [
                    'force_serve_as',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('force_serve_as',): {

                        "PICTURE": "picture"
                    },
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'file_name':
                        (str,),
                    'force_serve_as':
                        (str,),
                    'best_fit_height':
                        (int,),
                    'best_fit_width':
                        (int,),
                },
                'attribute_map': {
                    'group': 'group',
                    'file_name': 'fileName',
                    'force_serve_as': 'force_serve_as',
                    'best_fit_height': 'best_fit_height',
                    'best_fit_width': 'best_fit_width',
                },
                'location_map': {
                    'group': 'path',
                    'file_name': 'path',
                    'force_serve_as': 'query',
                    'best_fit_height': 'query',
                    'best_fit_width': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/octet-stream',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__files_group_file_name_get
        )

        def __files_group_file_name_put(
            self,
            group,
            file_name,
            **kwargs
        ):
            """Uploads a single file  # noqa: E501

            The file will be stored at /data/storage/{group}/{file_name} (you need to remember the group and file name to get or delete it again)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.files_group_file_name_put(group, file_name, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): The file group
                file_name (str): The file name (including extension)<br>**BASE64 encoded**

            Keyword Args:
                body (file_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['file_name'] = \
                file_name
            return self.call_with_http_info(**kwargs)

        self.files_group_file_name_put = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/files/{group}/{fileName}',
                'operation_id': 'files_group_file_name_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'file_name',
                    'body',
                ],
                'required': [
                    'group',
                    'file_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'file_name':
                        (str,),
                    'body':
                        (file_type,),
                },
                'attribute_map': {
                    'group': 'group',
                    'file_name': 'fileName',
                },
                'location_map': {
                    'group': 'path',
                    'file_name': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/octet-stream'
                ]
            },
            api_client=api_client,
            callable=__files_group_file_name_put
        )
